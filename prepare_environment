#!/bin/sh


# Copyright 2024 Montana State University Software Engineering and Cybersecurity Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the “Software”),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

########################################################################
# Prepares Environment For PIQUE-Cloud and runs PIQUE on sample targets
########################################################################

WORKDIR="$PWD"
INPUT_MESSAGE="##############################################\n#   INPUT NEEDED    \n##############################################"
PROGNAME="

               ██████╗ ██╗ ██████╗ ██╗   ██╗███████╗
               ██╔══██╗██║██╔═══██╗██║   ██║██╔════╝
               ██████╔╝██║██║   ██║██║   ██║█████╗
               ██╔═══╝ ██║██║▄▄ ██║██║   ██║██╔══╝
               ██║     ██║╚██████╔╝╚██████╔╝███████╗
               ╚═╝     ╚═╝ ╚══▀▀═╝  ╚═════╝ ╚══════╝

                     ██████╗██╗      ██████╗ ██╗   ██╗██████╗
                    ██╔════╝██║     ██╔═══██╗██║   ██║██╔══██╗
                    ██║     ██║     ██║   ██║██║   ██║██║  ██║
                    ██║     ██║     ██║   ██║██║   ██║██║  ██║
                    ╚██████╗███████╗╚██████╔╝╚██████╔╝██████╔╝
                     ╚═════╝╚══════╝ ╚═════╝  ╚═════╝ ╚═════╝

 ------------------------------------------------------------------------

"
printBanner() {
    COLUMNS=$(tput cols)
    # shellcheck disable=SC2002
    if [ -f msu_logo_ascii.txt ] && [ -x /bin/perl ] && [ "$COLUMNS" -gt 100 ]; then
      cat msu_logo_ascii.txt | perl -pe 'select undef,undef,undef,.01555'
      printf "$PROGNAME" | perl -pe 'select undef,undef,undef,.01555'
      echo " " | perl -pe 'select undef,undef,undef,0.20000'
    else
        printf "$PROGNAME"
    fi
}

# Dependency Checks
check_deps() {
    # Check that wget is installed
    printf "Checking dependencies...\n"
    [ -x "$(which wget)" ] || { printf "\u001b[31mERROR: wget is not installed. Please install wget on your system or perform manual installation of PIQUE-Cloud\nexit 1\n\u001b[0m"; exit 1; }
    printf "\twget is installed\n"

    # Check that docker is installed and user is logged in
    [ -x "$(which docker)" ] || { printf "\u001b[31mPlease ensure that docker is installed, running, and configured with your username and login.\u001b[0m\nexit 1\n"; exit 1; }
    printf "\tdocker is installed\n"

    # Check git is installed
    git --version >/dev/null 2>&1 || { printf "\u001b[31mgit is not installed. Please install git on your system to continue PIQUE-Cloud setup\u001b[0m\nexit 1\n"; exit 1; }
    printf "\tgit is installed\n"
    printf "\u001b[32mDependency check completed successfully\n\n\u001b[0m"
}

# Check for/create input, output, and subdirectories
set_up_directories() {
    printf "Checking directory structure...\n"
    [ -d "$WORKDIR/input/keys" ] || { mkdir -p "$WORKDIR/input/keys"; }
    [ -d "$WORKDIR/output/" ] || { mkdir -p "$WORKDIR/output"; }
    printf "\u001b[32mDirectory check/setup complete\n\n\u001b[0m"
}

# Checks for existing keys. If they don't exist, prompt user to create them and paste into prompts
get_authentication_keys() {
    printf "Checking authentication keys...\n"

    NVD_KEY_PATH="$WORKDIR/input/keys/nvd-api-key.txt"
    GITHUB_TOKEN_PATH="$WORKDIR/input/keys/github-token.txt"

    # Check if keys already exist and provide option to paste in keys
    # Future Work: Key validation
    [ -f "$NVD_KEY_PATH" ] || { printf "$INPUT_MESSAGE\n"; \
        printf "\u001b[33mThis step asks you to paste an api key into the terminal. If you are concened about having a secure key in your clipboard or shell history,\n"; \
        printf "type the letter 'n' in the prompt. The script will exit and you can manually generate WORKDIR/input/keys/nvd-api-key.txt. Then, rerun this script.\u001b[0m\n"; \
        printf "Please generate an API key with the National Vulnerability Database here:\u001b[36m https://nvd.nist.gov/developers/request-an-api-key\u001b[0m\n"; \
        printf "Be sure to save it somewhere secure. If you lose the key, you will need to generate a new one.\n\n"; \
        printf "Once you have retrieved your key, enter it here: "; \
        read nvd_key; \
        [ "$nvd_key" = "n" ] && exit 1 || echo "$nvd_key" > $NVD_KEY_PATH; }
    printf "\tNVD Key setup complete\n"

    # Future Work: Key validation
    [ -f "$GITHUB_TOKEN_PATH" ] || { printf "$INPUT_MESSAGE\n"; \
        printf "\u001b[33mThis step asks you to paste a personal access token into the terminal. If you are concened about having a secure key in your clipboard or shell \n"; \
        printf "history, type the letter 'n' in the prompt. The script will exit and you can manually generate WORKDIR/input/keys/github-token.txt Then, rerun this script.\u001b[0m\n"; \
        printf "Please generate a Github personal access token with ......permissions. More info:\u001b[36m https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens\u001b[0m\n\n"; \
        printf "Once you have generated or retrieved your token, paste it here: "; \
        read -r github_key; \
        [ "$github_key" = "n" ] && exit 1 || echo "$github_key" > "$GITHUB_TOKEN_PATH"; }
    printf "\tGithub token setup complete\n"
    printf "\u001b[32mAuthentication setup complete\u001b[0m\n\n"
}

run() {
    printBanner
    check_deps
    set_up_directories
    get_authentication_keys

#    docker run -it --rm -v "/var/run/docker.sock:/var/run/docker.sock:rw" -v "$WORKDIR"/input:/input -v "$WORKDIR"/output:/output msusel/pique-sbom-supply-chain-sec:latest
    docker-compose -f "$WORKDIR/src/main/java/data/nvdMirror/docker-compose.yml" up --detach
}
run

